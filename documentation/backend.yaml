openapi: "3.0.3"
info:
  title: YetAnotherPong Backend
  version: "1.0"
servers:
  - url: https://localhost:7979

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    account_id:
      description: An account unique ID
      name: account_id
      in: path
      required: true
      schema:
        type: integer

    username:
      description: A unique user name
      name: username
      in: path
      required: true
      schema:
        type: string

  schemas:
    account_id:
      description: An account unique ID
      type: integer
      example: 108244

    email:
      description: An email address
      type: string
      format: email
      example: nanou@example.com

    password:
      description: A secret password
      type: string
      minLength: 8
      maxLength: 24
      example: "Renardpolaire74!"

    access_token:
      description: A JSON Web Token granting authorization
      type: string
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NedW50X2lkIjo5NiwiaWF0IjoxNzQwNYc1NzM5LCJleHAiOjE3NDA1NzY2Mzl9.7ZuX-M9EIdByqk0X2bjU0-YjgFyVZYzSI520YZbw9N8"

    auth_method:
      description: The authentication method associated with an account
      type: string
      enum:
        - password_auth
        - fortytwo_auth
        - google_auth

    otp_methods:
      description: The one time password methods activated for an account
      type: array
      items:
        type: string
        enum:
          - app

    otp_method:
      description: A two factor authentication method
      type: string
      enum:
        - app
        - none

    otp:
      description: A One Time password
      type: string
      example: 924415

    payload_token:
      description: A JSON Web Token generated by the server
      type: string
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjo0MDc5LCJtZXRob2QiOiJ0b3RwIiwiaWF0IjoxNzQ1MDk2MTkwfQ.Uc3bXw59aoQPxBL1okoGAa17NZMRSiYanolViOmwaPg

    username:
      description: A unique user name
      type: string
      minLength: 4
      maxLength: 15
      example: "CronchCronch"

    avatar:
      description: A profile picture URI
      type: string
      example: https://example.com/image.jpg

    limit:
      type: integer
      minimum: 1
      maximum: 100
      default: 30
      description: Number of items to return

    offset:
      type: integer
      minimum: 0
      default: 0
      description: Number of items to skip

    user:
      type: object
      properties:
        account_id:
          $ref: "#/components/schemas/account_id"
        username:
          $ref: "#/components/schemas/username"
        avatar:
          $ref: "#/components/schemas/avatar"

    gamemode_name:
      $ref: "./asyncapi/lobbies.yaml#/components/schemas/gamemode_name"

    gamemode:
      $ref: "./asyncapi/lobbies.yaml#/components/schemas/gamemode"

    tournament:
      $ref: "./asyncapi/tournament.yaml#/components/schemas/tournament"

    light_tournament:
      $ref: "./asyncapi/tournament.yaml#/components/schemas/light_tournament"

    match_state:
      $ref: "./asyncapi/matchmaking.yaml#/components/schemas/match_state"

    match:
      $ref: "./asyncapi/matchmaking.yaml#/components/schemas/match"

    light_match:
      $ref: "./asyncapi/matchmaking.yaml#/components/schemas/light_match"

    matchmaking_user:
      $ref: "./asyncapi/matchmaking.yaml#/components/schemas/matchmaking_user"

    db_match:
      type: object
      required:
        - match_id
        - gamemode
        - state
        - created_at
        - updated_at
        - teams
        - players
      
      properties:
        match_id:
          type: integer
          example: 12345
        tournament_id:
          type: integer
          example: 67890
        gamemode:
          $ref: "#/components/schemas/gamemode_name"
        state:
          $ref: "#/components/schemas/match_state"
        created_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        teams:
          type: array
          items:
            type: object
            properties:
              team_id:
                type: integer
                example: 1
              score:
                type: integer
                example: 0
              name:
                type: string
                example: "Team A"
              winning:
                type: number
                example: 1
        players:
          type: array
          items:
            type: object
            properties:
              account_id:
                $ref: "#/components/schemas/account_id"
              player_index:
                type: integer
                example: 0
              team_index:
                type: integer
                example: 1
              win_probability:
                type: number
                format: float
                example: 0.75
              begin_rating:
                type: number
                format: number
                example: 1500
              end_rating:
                type: number
                format: number
                example: 1515
              profile:
                $ref: "#/components/schemas/user"


    order:
      type: string
      enum:
        - asc
        - desc

  responses:
    AccountNotFound:
      description: Resource not found

    AuthSuccess:
      description: Successful authentication
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                $ref: "#/components/schemas/access_token"
              expire_at:
                type: string
                format: int64
                example: "1740575739427"
            required:
              - access_token
              - expire_at

paths:
  /register:
    post:
      summary: account registration
      description: Create a new account using an email address and a password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/email"
                password:
                  $ref: "#/components/schemas/password"
              required:
                - email
                - password
      responses:
        201:
          $ref: "#/components/responses/AuthSuccess"
        401:
          description: Failure
        409:
          description: Email address already in use

  /auth:
    post:
      summary: login
      description: Authenticate using an email address and a password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/email"
                password:
                  $ref: "#/components/schemas/password"
              required:
                - email
                - password
              additionalProperties: false

      responses:
        200:
          $ref: "#/components/responses/AuthSuccess"
        202:
          description: 2FA required
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    enum:
                      - 202
                  code:
                    type: string
                    enum:
                      - 2FA_VERIFICATION
                  payload_token:
                    $ref: "#/components/schemas/payload_token"
        400:
          description: Bad Request
        401:
          description: Invalid credentials
        502:
          description: Bad Gateway

  /auth/2fa:
    post:
      summary: login 2FA
      description: 2FA validation route
      tags:
        - Authentication
        - 2FA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payload_token:
                  $ref: "#/components/schemas/payload_token"
                otp_method:
                  $ref: "#/components/schemas/otp_method"
                otp:
                  $ref: "#/components/schemas/otp"
              required:
                - payload
                - otp
              additionalProperties: false
      responses:
        200:
          $ref: "#/components/responses/AuthSuccess"
        400:
          description: Bad Request
        403:
          description: Invalid one-time password
        502:
          description: Bad Gateway

  /token/refresh:
    post:
      summary: refresh token
      description: Exchange a refresh_token for a new access_token
      tags:
        - Token
      parameters:
        - in: cookie
          name: refresh_token
          schema:
            type: string
          required: true
          description: HTTP-only cookie containing the refresh_token
      responses:
        200:
          $ref: "#/components/responses/AuthSuccess"

  /token/revoke:
    post:
      summary: revoke token
      description: Revoke a refresh_token, making it invalid for future use
      tags:
        - Token
      parameters:
        - in: cookie
          name: refresh_token
          schema:
            type: string
          required: true
          description: HTTP-only cookie containing the refresh_token
      responses:
        204:
          description: Revoked successfully
        403:
          description: Invalid refresh_token

  /auth/google:
    post:
      summary: Google Sign in remote auth
      description: Authenticate using Google Sign in
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  description: Google Sign in JWT
                  type: string
                  example: eyJhbGciOiJSUzI1Ni.eyJjbGllbnRfaWQiEJpT0cxaWJE.IxvaN4ER-PlPgLYzfRh
              additionalProperties: false
              required:
                - token
      responses:
        200:
          $ref: "#/components/responses/AuthSuccess"
        401:
          description: Authentication failure

  /auth/fortytwo:
    get:
      summary: 42API remote auth
      description: Authenticate using 42API Oauth
      tags:
        - Authentication
      responses:
        301:
          description: Redirect to 42API authorize url

  /auth/fortytwo/callback:
    get:
      summary: 42API callback
      description: Callback route for 42API OAuth
      tags:
        - Authentication
      responses:
        301:
          description: default
          headers:
            Location:
              schema:
                type: string
              description: URL to redirect to, including `access_token` and `expire_at` parameters for a successful authentication or `statusCode` `code` `error` `message` in case of error

  /2fa/app/activate:
    get:
      summary: 2FA app generation
      description: Retrieve a time-based one-time password key meant for an authenticator application
      tags:
        - 2FA Activation
      responses:
        200:
          description: Successful start of Application based 2FA activation process
          content:
            application/json:
              schema:
                type: object
                properties:
                  otpauth:
                    type: string
                    description: A Time-based one-time password key
                    example: otpauth://totp/yetanothertranscendenceteam@gmail.com?secret=XTRT253WS3I62NSRXUIKLSZ4SUEBJ2EG&issuer=YATT&algorithm=SHA1&digits=6&period=30
                required:
                  - otpauth
        400:
          description: Bad request
        401:
          description: Unauthorized
        409:
          description: 2FA already activated
      security:
        - BearerAuth: []

  /2fa/app/activate/verify:
    post:
      summary: 2FA app activation
      description: Confirm application based 2FA activation using a one-time password
      tags:
        - 2FA Activation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  $ref: "#/components/schemas/otp"
              required:
                - otp
              additionalProperties: false
      responses:
        204:
          description: 2FA activation process complete
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Invalid one-time password | No ongoing activation process
      security:
        - BearerAuth: []

  /2fa/app/deactivate:
    post:
      summary: 2FA app deactivation
      description: Remove the application based 2FA activation using a one-time password
      tags:
        - 2FA Activation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  $ref: "#/components/schemas/otp"
              required:
                - otp
              additionalProperties: false
      responses:
        204:
          description: Successfull deactivation
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Invalid one-time password
        502:
          description: Bad gateway
      security:
        - BearerAuth: []

  /me:
    get:
      summary: token bearer infos
      description: Retrieve informations about the access_token bearer
      tags:
        - Users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  account_id:
                    $ref: "#/components/schemas/account_id"
                  username:
                    $ref: "#/components/schemas/username"
                  avatar:
                    $ref: "#/components/schemas/avatar"
                  credentials:
                    type: object
                    properties:
                      account_id:
                        $ref: "#/components/schemas/account_id"
                      email:
                        $ref: "#/components/schemas/email"
                      auth_method:
                        $ref: "#/components/schemas/auth_method"
                      otp_methods:
                        $ref: "#/components/schemas/otp_methods"
                    required:
                      - account_id
                      - email
                      - auth_method
                      - otp_methods
                  last_match:
                    $ref: "#/components/schemas/light_match"
                  last_tournament:
                    $ref: "#/components/schemas/light_tournament"
                  matchmaking_users:
                    type: array
                    items:
                      $ref: "#/components/schemas/matchmaking_user"
                required:
                  - account_id
                  - username
                  - avatar
                  - credentials

        401:
          description: Unauthorized
        502:
          description: Bad gateway
      security:
        - BearerAuth: []

  /avatars:
    get:
      summary: get available avatars
      description: Retrieve all the avatars available to the access_token bearer
      tags:
        - Avatars
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  default:
                    type: array
                    items:
                      type: string
                      format: uri
                    example:
                      - "https://z1r4p5:8181/avatars/default/SwhBfWnSFiZM.jpg"
                      - "https://z1r4p5:8181/avatars/default/70UmnQ4MkOyM.jpg"
                      - "https://z1r4p5:8181/avatars/default/620-200x200.jpg"
                  user:
                    type: array
                    items:
                      type: string
                      format: uri
                    example:
                      - "https://z1r4p5:8181/avatars/users/y2xCNJpHBxV4.jpg"
                      - "https://z1r4p5:8181/avatars/users/PCeXT4xyrQ6w.jpg"
                      - "https://z1r4p5:8181/avatars/users/vBPsHV081GLs.jpg"
      security:
        - BearerAuth: []

    post:
      summary: upload avatar
      description: Upload a personal avatar for the access_token bearer
      tags:
        - Avatars
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: base64
              description: Base64 encoded image data
      responses:
        204:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: "https://example.com/avatars/user123.jpg"
        403:
          description: Avatar limit reached
      security:
        - BearerAuth: []

    delete:
      summary: delete avatar
      description: Upload a personal avatar of the access_token bearer
      tags:
        - Avatars
      parameters:
        - in: query
          name: url
          required: true
          schema:
            type: string
            format: uri
          description: URL of the avatar to be deleted
      responses:
        204:
          description: Avatar successfully deleted
        404:
          description: Avatar not found
      security:
        - BearerAuth: []

  /users:
    get:
      summary: get users
      description: Get a list of user profiles with optional filtering and pagination
      tags:
        - Users
      parameters:
        - in: query
          name: limit
          schema:
            $ref: "#/components/schemas/limit"
        - in: query
          name: offset
          schema:
            $ref: "#/components/schemas/offset"
        - in: query
          name: filter[username]
          schema:
            type: string
          description: Filters results to include only users with exact matching usernames. Case-sensitive
        - in: query
          name: filter[username:match]
          schema:
            type: string
          description: Filters results to include users whose usernames contain the specified string. Allows partial matches and is case-insensitive
        - in: query
          name: filter[account_id]
          schema:
            type: string
          description: Filters results to include users with account_id
        - in: query
          name: filter[account_id:not]
          schema:
            type: string
          description: Filters results to exclude users with account_id
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
      security:
        - BearerAuth: []

  /users/{account_id}:
    get:
      summary: get user
      description: Retrieve public informations about the user associated with an account_id
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/account_id"
      responses:
        204:
          description: Success
        404:
          $ref: "#/components/responses/AccountNotFound"
      security:
        - BearerAuth: []

  /social/requests/{account_id}:
    post:
      summary: request as friend
      description: Send a friend request to another user
      tags:
        - Social
        - Friends
      parameters:
        - $ref: "#/components/parameters/account_id"
      responses:
        204:
          description: Friend request sent
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Friend request refused by the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - MAX_FRIENDS
                      - IS_BLOCKED
                      - IS_FRIEND
                      - SELF_REQUEST
                required:
                  - code
        404:
          description: Account not found
        409:
          description: Friend request already pending
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - PENDING
                required:
                  - code
        502:
          description: Bad gateway
      security:
        - BearerAuth: []

    delete:
      summary: dismiss friend request
      description: Cancel a friend request you have sent to a user OR Refuse a friend request sent by a user
      tags:
        - Social
        - Friends
      parameters:
        - $ref: "#/components/parameters/account_id"
      responses:
        204:
          description: Friend request dismissed
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Friend request not found
      security:
        - BearerAuth: []

  /social/friends/{account_id}:
    delete:
      summary: remove friend
      description: Remove a mutual friendship between the bearer and an account_id
      tags:
        - Social
        - Friends
      parameters:
        - $ref: "#/components/parameters/account_id"
      responses:
        204:
          description: Friendship removed
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Friendship not found
      security:
        - BearerAuth: []

  /social/blocks/{account_id}:
    post:
      summary: block user
      description: Add a user to the bearer block list
      tags:
        - Social
        - Friends
      parameters:
        - $ref: "#/components/parameters/account_id"
      responses:
        204:
          description: User blocked
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Block request refused by the server
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - MAX_BLOCKS
                      - SELF_BLOCK
                required:
                  - code
        404:
          description: User not found
        409:
          description: User already blocked
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - BLOCKED
                required:
                  - code
        502:
          description: Bad gateway
      security:
        - BearerAuth: []

    delete:
      summary: unblock user
      description: Remove a user from the bearer block list
      tags:
        - Social
        - Friends
      parameters:
        - $ref: "#/components/parameters/account_id"
      responses:
        204:
          description: User unblocked
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: User not blocked
      security:
        - BearerAuth: []

  /social/notify:
    get:
      parameters:
        - in: path
          name: access_token
          required: true
          description: A JSON Web Token
          schema:
            type: string
      tags:
        - Websocket
        - Social
      summary: social notification websocket
      description: |
        Establishes a WebSocket connection for real-time social notifications.
        Follow this [link](http://localhost:42000/asyncapi/social) for detailed documentation.
      responses:
        101:
          description: Switching Protocol

  /settings/profile:
    patch:
      summary: profile modification
      description: Modify the profile associated with the access_token bearer
      tags:
        - Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                avatar:
                  $ref: "#/components/schemas/avatar"
              additionalProperties: false
              oneOf:
                - required: [username]
                - required: [avatar]
      responses:
        204:
          description: Successful profile edition
        403:
          description: Invalid avatar
        409:
          description: Username already in use
      security:
        - BearerAuth: []

  /settings/account:
    patch:
      summary: account modification
      description: Modify the profile associated with the access_token bearer
      tags:
        - Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                old_password:
                  type: string
                  minLength: 8
              required:
                - old_password
              additionalProperties: false
      responses:
        202:
          description: 2FA required
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    enum:
                      - 202
                  code:
                    type: string
                    enum:
                      - 2FA_VERIFICATION
                  payload_token:
                    $ref: "#/components/schemas/payload_token"
        204:
          description: Successful account edition
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Invalid password
        409:
          description: Email already in use
      security:
        - BearerAuth: []

    delete:
      summary: account deletion
      description: Delete everything related to the access_token bearer
      tags:
        - Settings
      responses:
        204:
          description: Successful profile deletion
      security:
        - BearerAuth: []

  /settings/account/2fa:
    patch:
      summary: account modification 2FA
      description: 2FA validation route
      tags:
        - Settings
        - 2FA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payload_token:
                  $ref: "#/components/schemas/payload_token"
                otp_method:
                  $ref: "#/components/schemas/otp_method"
                otp:
                  $ref: "#/components/schemas/otp"
              required:
                - payload
                - otp_method
                - otp
              additionalProperties: false
      responses:
        200:
          description: Successful account edition
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Invalid one-time password
        502:
          description: Bad Gateway
      security:
        - BearerAuth: []

  /matchmaking/tournaments/{tournament_id}:
    parameters:
      - in: path
        name: tournament_id
        required: true
        description: The ID of the tournament
        schema:
          type: integer
          example: 12345
    get:
      summary: get tournament
      description: Retrieve information about a specific tournament
      tags:
        - Matchmaking
        - Tournaments
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tournament"
        404:
          description: Tournament not found

  /matchmaking/tournaments/{tournament_id}/notify:
    parameters:
      - in: path
        name: tournament_id
        required: true
        description: The ID of the tournament
        schema:
          type: integer
          example: 12345
    get:
      summary: tournament notification SSE
      description: |
        Establishes a SSE connection for real-time tournament notifications.
        Follow this [link](http://localhost:42000/asyncapi/tournament) for detailed documentation.
      tags:
        - Matchmaking
        - Tournaments
      responses:
        200:
          description: Successful response
        204:
          description: No events available, tournament is done or cancelled
        404:
          description: Tournament not found

  /matchmaking/matches/{match_id}:
    parameters:
      - in: path
        name: match_id
        required: true
        description: The ID of the match
        schema:
          type: integer
          example: 12345
    get:
      summary: get match
      description: Retrieve information about a specific match
      tags:
        - Matchmaking
        - Matches
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/db_match"
        404:
          description: Match not found
    patch:
      summary: update match
      description: Update the status of a match. This requires a valid matchmaking JWT.
      tags:
        - Matchmaking
        - Matches
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  $ref: "#/components/schemas/match_state"
                score_0:
                  type: integer
                  description: The score of team 0
                score_1:
                  type: integer
                  description: The score of team 1
      responses:
        200:
          description: Match updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/light_match"
        404:
          description: Match not found

  /matchmaking/users/{account_id}:
    parameters:
      - in: path
        name: account_id
        required: true
        description: The ID of the user
        schema:
          type: integer
          example: 12345
    get:
      summary: get user matchmaking info
      description: Retrieve information about a specific user's matchmaking status
      tags:
        - Matchmaking
        - Matches
        - Users
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  last_match:
                    $ref: "#/components/schemas/light_match"
                  last_tournament:
                    $ref: "#/components/schemas/light_tournament"
                  matchmaking_users:
                    type: array
                    items:
                      $ref: "#/components/schemas/matchmaking_user"
        404:
          description: User not found

  /matchmaking/users/{account_id}/matches:
    parameters:
      - in: path
        name: account_id
        required: true
        description: The ID of the user
        schema:
          type: integer
          example: 12345
    get:
      summary: get user matches
      description: Retrieve a list of matches for a specific user
      tags:
        - Matchmaking
        - Matches
        - Users
      parameters:
        - in: query
          name: limit
          schema:
            $ref: "#/components/schemas/limit"

        - in: query
          name: offset
          schema:
            $ref: "#/components/schemas/offset"

        - in: query
          name: filter[state]
          schema:
            type: array
            items:
              $ref: "#/components/schemas/match_state"
          description: Filters results to include matches with specific states

        - in: query
          name: filter[gamemode]
          schema:
            type: array
            items:
              $ref: "#/components/schemas/gamemode_name"
          description: Filters results to include matches with specific gamemode names

        - in: query
          name: filter[winning]
          schema:
            type: array
            items:
              type: integer
              enum: 
                - 0
                - 1
          description: Filters results to include won or lost matches

        - in: query
          name: filter[player_index]
          schema:
            type: array
            items:
              type: integer
          description: Filters results to include matches where the user was in a specific player index (position inside match)

        - in: query
          name: order[match_id]
          schema:
            $ref: "#/components/schemas/order"

        - in: query
          name: order[gamemode]
          schema:
            $ref: "#/components/schemas/order"

        - in: query
          name: order[state]
          schema:
            $ref: "#/components/schemas/order"
        
        - in: query
          name: order[player_index]
          schema:
            $ref: "#/components/schemas/order"

      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/db_match"

  /lobbies/join:
    get:
      parameters:
        - in: path
          name: access_token
          required: true
          description: A JSON Web Token
          schema:
            type: string
        - in: path
          name: gamemode
          description: The gamemode of the lobby to create
          schema:
            $ref: "#/components/schemas/gamemode_name"
        - in: path
          name: secret
          description: The secret of the lobby to join
          schema:
            type: string
      tags:
        - Websocket
        - Lobbies
      summary: lobby websocket
      description: |
        Establishes a WebSocket connection for real-time lobby interactions.
        Follow this [link](http://localhost:42000/asyncapi/lobbies) for detailed documentation.
      responses:
        101:
          description: Switching Protocol

  /lobbies/gamemodes:
    get:
      summary: get gamemodes
      description: Retrieve a list of available gamemodes
      tags:
        - Lobbies
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - unranked_1v1
                  - unranked_2v2
                  - ranked_1v1
                  - ranked_2v2
                  - custom_1v1
                  - custom_2v2
                properties:
                  unranked_1v1:
                    $ref: "#/components/schemas/gamemode"
                  unranked_2v2:
                    $ref: "#/components/schemas/gamemode"
                  ranked_1v1:
                    $ref: "#/components/schemas/gamemode"
                  ranked_2v2:
                    $ref: "#/components/schemas/gamemode"
                  custom_1v1:
                    $ref: "#/components/schemas/gamemode"
                  custom_2v2:
                    $ref: "#/components/schemas/gamemode"
