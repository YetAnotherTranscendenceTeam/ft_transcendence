openapi: "3.0.3"
info:
  title: YetAnotherPong Backend
  version: "1.0"
servers:
  - url: https://localhost:7979
  - url: https://z1r2p2:7979

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    account_id:
      description: An account unique ID
      name: account_id
      in: path
      required: true
      schema:
        type: integer

    username:
      description: A unique user name
      name: username
      in: path
      required: true
      schema:
        type: string

  schemas:
    account_id:
      description: An account unique ID
      type: integer
      example: 27017

    email:
      description: An email address
      type: string
      format: email
      example: nanou@example.com

    password:
      description: A secret password
      type: string
      minLength: 8
      maxLength: 24
      example: "Renardpolaire74!"

    access_token:
      description: A JSON Web Token
      type: string
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NedW50X2lkIjo5NiwiaWF0IjoxNzQwNYc1NzM5LCJleHAiOjE3NDA1NzY2Mzl9.7ZuX-M9EIdByqk0X2bjU0-YjgFyVZYzSI520YZbw9N8"

    username:
      description: A unique user name
      type: string
      minLength: 4
      maxLength: 15
      example: "CronchCronch"

    avatar:
      description: An URI to profile picture
      type: string
      example: https://example.com/image.jpg
  
    limit:
      type: integer
      minimum: 1
      maximum: 100
      default: 30
      description: Number of items to return

    offset:
      type: integer
      minimum: 0
      default: 0
      description: Number of items to skip

    user:
      type: object
      properties:
        account_id:
          $ref: "#/components/schemas/account_id"
        username:
          $ref: "#/components/schemas/username"
        avatar:
          $ref: "#/components/schemas/avatar"

  responses:
    AccountNotFound:
      description: Resource not found

    AuthSuccess:
      description: Successful authentication
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                $ref: "#/components/schemas/access_token"
              expire_at:
                type: string
                format: int64
                example: "1740575739427"
            required:
              - access_token
              - expire_at

paths:
  /register:
    post:
      summary: account registration
      description: Create a new account using an email address and a password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/email"
                password:
                  $ref: "#/components/schemas/password"
              required:
                - email
                - password
      responses:
        200:
          $ref: "#/components/responses/AuthSuccess"
        401:
          description: Failure

  /auth:
    post:
      summary: login
      description: Authenticate using an email address and a password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/email"
                password:
                  $ref: "#/components/schemas/password"
              required:
                - email
                - password
      responses:
        201:
          $ref: "#/components/responses/AuthSuccess"
        409:
          description: Email address already in use

  /token/refresh:
    post:
      summary: refresh token
      description: Exchange a refresh_token for a new access_token
      tags:
        - Token
      parameters:
      - in: cookie
        name: refresh_token
        schema:
          type: string
        required: true
        description: HTTP-only cookie containing the refresh_token
      responses:
        200:
          $ref: "#/components/responses/AuthSuccess"
  
  /token/revoke:
    post:
      summary: revoke token
      description: Revoke a refresh_token, making it invalid for future use
      tags:
        - Token
      parameters:
      - in: cookie
        name: refresh_token
        schema:
          type: string
        required: true
        description: HTTP-only cookie containing the refresh_token
      responses:
        204:
          description: Revoked successfully
        403:
          description: Invalid refresh_token

  /auth/fortytwo/:
    get:
      summary: 42API remote auth
      description: Authenticate using 42API Oauth
      tags:
        - Authentication
      responses:
        301:
          description: Redirect to 42API authorize url

  /auth/fortytwo/callback:
    get:
      summary: 42API callback
      description: Callback route for 42API OAuth
      tags:
        - Authentication
      responses:
        301:
          description: default
          headers:
            Location:
              schema:
                type: string
              description: URL to redirect to, including `access_token` and `expire_at` parameters for a sucessfull authentication or `statusCode` `code` `error` `message` in case of error

  /me:
    get:
      summary: token bearer infos
      description: Retrieve informations about the access_token bearer
      tags:
        - Users
      responses:
        204:
          description: Sucess
      security:
        - BearerAuth: []

  /avatars:
    get:
      summary: get available avatars
      description: Retrieve all the avatars available to the access_token bearer
      tags:
        - Avatars
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  default:
                    type: array
                    items:
                      type: string
                      format: uri
                    example:
                      - "https://z1r4p5:8181/avatars/default/SwhBfWnSFiZM.jpg"
                      - "https://z1r4p5:8181/avatars/default/70UmnQ4MkOyM.jpg"
                      - "https://z1r4p5:8181/avatars/default/620-200x200.jpg"
                  user:
                    type: array
                    items:
                      type: string
                      format: uri
                    example:
                      - "https://z1r4p5:8181/avatars/users/y2xCNJpHBxV4.jpg"
                      - "https://z1r4p5:8181/avatars/users/PCeXT4xyrQ6w.jpg"
                      - "https://z1r4p5:8181/avatars/users/vBPsHV081GLs.jpg"
      security:
        - BearerAuth: []

    post:
      summary: upload avatar
      description: Upload a personal avatar for the access_token bearer
      tags:
        - Avatars
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: base64
              description: Base64 encoded image data
      responses:
        204:
          description: Sucess
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: 'https://example.com/avatars/user123.jpg'
        403:
          description: Avatar limit reached
      security:
        - BearerAuth: []

    delete:
      summary: delete avatar
      description: Upload a personal avatar of the access_token bearer
      tags:
        - Avatars
      parameters:
        - in: query
          name: url
          required: true
          schema:
            type: string
            format: uri
          description: URL of the avatar to be deleted
      responses:
        204:
          description: Avatar successfully deleted
        404:
          description: Avatar not found
      security:
        - BearerAuth: []

  /users:
    get:
      summary: get users
      description: Get a list of user profiles with optional filtering and pagination
      tags:
        - Users
      parameters:
        - in: query
          name: limit
          schema:
            $ref: '#/components/schemas/limit'
        - in: query
          name: offset
          schema:
            $ref: '#/components/schemas/offset'
        - in: query
          name: filter[username]
          schema:
            type: string
          description: Filters results to include only users with exact matching usernames. Case-sensitive
        - in: query
          name: filter[username:match]
          schema:
            type: string
          description: Filters results to include users whose usernames contain the specified string. Allows partial matches and is case-insensitive.
      responses:
        '200':
          description: Successful response
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
      security:
        - BearerAuth: []

  /users/{account_id}:
    get:
      summary: get user
      description: Retrieve public informations about the user associated with an account_id
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/account_id"
      responses:
        204:
          description: Sucess
        404:
          $ref: "#/components/responses/AccountNotFound"
      security:
        - BearerAuth: []

  /social/follows:
    get:
      summary: get follows
      description: Return a list of all the accounts followed by the bearer
      tags:
        - Social
        - Follows
      responses:
        200:
          description: A list of accounts followed by the authenticated user.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    following:
                      type: integer
                      description: The ID of the account being followed.
                    created_at:
                      type: string
                      format: date-time
                      description: The timestamp when the follow relationship was created.
                example:
                  - following: 12345
                    created_at: "2025-03-11T14:23:00Z"
                  - following: 67890
                    created_at: "2025-03-12T09:45:00Z"
      security:
        - BearerAuth: []
  
  /social/follows/{account_id}:
    post:
      summary: follow account
      description: Follow another user account
      tags:
        - Social
        - Follows
      parameters:
        - in: path
          name: account_id
          required: true
          description: ID of the account to follow
          schema:
            type: integer
            example: 12345
      responses:
        204:
          description: Successfully followed the account
        403:
          description: Cannot follow your own account
        409:
          description: Already following this account
      security:
        - bearerAuth: []

    delete:
      summary: unfollow account
      description: Remove a follow relationship
      tags:
        - Social
        - Follows
      parameters:
        - in: path
          name: account_id
          required: true
          description: ID of the account to unfollow
          schema:
            type: integer
            example: 12345
      responses:
        204:
          description: Successfully unfollowed the account (no content)
        406:
          description: Not following this account
      security:
        - bearerAuth: []

  /settings/profile:
    patch:
      summary: profile modification
      description: Modify the profile associated with the access_token bearer
      tags:
        - Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                avatar:
                  $ref: "#/components/schemas/avatar"
              additionalProperties: false
              oneOf:
              - required: [username]
              - required: [avatar]
      responses:
        204:
          description: Sucessfull profile edition
        403:
          description: Invalid avatar
        409:
          description: Username already in use
      security:
        - BearerAuth: []
  
  /settings/account:
    delete:
      summary: account deletion
      description: Delete everything related to the access_token bearer
      tags:
        - Settings
      responses:
        204:
          description: Sucessfull profile deletion
      security:
        - BearerAuth: []
