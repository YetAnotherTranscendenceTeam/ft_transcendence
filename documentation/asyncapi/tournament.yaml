asyncapi: 3.0.0
info:
  title: Tournament API
  version: '1.0.0'
  description: API for tournament SSE.
servers:
  development:
    host: matchmaking:3000
    protocol: sse
    description: The matchmaking server (from inside the docker network)
  development-external:
    host: localhost:3000
    protocol: sse
    description: The matchmaking server (from outside the docker network)

channels:
  tournament:
    bindings:
      http:
        method: GET
    description: |
      Channel for tournament notifications. 
      Always assume event names to be the same as the message ID.
    address: /tournaments/{tournamentId}/notify
    parameters:
      tournamentId:
          description: The ID of the tournament.
    messages:
      sync:
        $ref: '#/components/messages/sync'
      match_update:
        $ref: '#/components/messages/match_update'
      finish:
        $ref: '#/components/messages/finish'

operations:
  subscribe:
    action: send
    summary: Subscribe to tournament notifications.
    channel:
      $ref: '#/channels/tournament'
    messages:
      - $ref: '#/channels/tournament/messages/sync'
      - $ref: '#/channels/tournament/messages/match_update'
      - $ref: '#/channels/tournament/messages/finish'

components:
  schemas:
    tournament_match:
      type: object
      required:
        - team_ids
        - scores
        - state
        - stage
        - index
      properties:
        match_id:
          type: number
          description: The id of the match (if started)
        team_ids:
          type: array
          maxLength: 2
          items:
            type: integer
            description: The index of the team in the teams array
        scores:
          type: array
          maxLength: 2
          minLength: 2
          items:
            type: integer
            description: The score of the team
            nullable: true
        state:
          type: string
          description: The state of the match
          enum:
            - waiting
            - playing
            - done
        stage:
          type: integer
          description: The stage of the match (0 = final, 1 = semi final, 2 = quarter final, etc)
        index:
          type: integer
          description: The index of the match in the matches array
    tournament:
      type: object
      required:
        - teams
        - matches
        - gamemode
        - id
        - active
      properties:
        active:
          type: integer
          enum:
            - 0
            - 1
          description: Whether the tournament is active or not
        id:
          type: number
          description: The id of the tournament
        teams:
          type: array
          minimumLength: 3
          items:
            type: object
            required:
              - name
              - players
            properties:
              name:
                type: string
                description: The name of the team
              players:
                $ref: "./matchmaking.yaml#/components/schemas/matchmaking_player"
        matches:
          type: array
          items:
            $ref: "#/components/schemas/tournament_match"
        gamemode:
          $ref: "./lobbies.yaml#/components/schemas/gamemode"
    light_tournament:
      type: object
      required:
        - gamemode
        - id
        - active
      properties:
        active:
          type: integer
          enum:
            - 0
            - 1
          description: Whether the tournament is active or not
        id:
          type: number
          description: The id of the tournament
        gamemode:
          $ref: "./lobbies.yaml#/components/schemas/gamemode"
  messages:
    sync:
      payload:
        description: First event sent when subscribing to the tournament channel.
        type: object
        required:
          - tournament
        properties:
          tournament:
            $ref: '#/components/schemas/tournament'
    match_update:
      payload:
        description: Event sent when a match is updated. (e.g. when scores, teams and/or state changes)
        type: object
        required:
          - match
        properties:
          match:
            $ref: '#/components/schemas/tournament_match'
    finish:
      payload:
        description: Event sent when the tournament is finished.
        type: object
        required:
          - tournament
        properties:
          tournament:
            $ref: '#/components/schemas/tournament'

