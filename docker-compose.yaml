services:
  nginx:
    build:
      context: services/nginx/
      args:
        - CONF_FILE=${NGINX_CONF_FILE}
    image: ${IMAGE_PREFIX}/transcendence.nginx:latest
    ports:
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:7979:7979"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    networks:
      - client
    depends_on:
      - avatars
      - social

  frontend:
    build:
      context: services/frontend/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
        - BACKEND_URL=${BACKEND_URL}
        - WS_URL=${WS_URL}
        - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    image: ${IMAGE_PREFIX}/transcendence.frontend:latest
    networks:
      - client

  credentials:
    build: 
      context: services/credentials/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.credentials:latest
    volumes:
      - sqlite:/database
    networks:
      - private

  token-manager:
    build: 
      context: services/token-manager/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.token-manager:latest
    volumes:
      - sqlite:/database
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - AUTHENTICATION_SECRET=${AUTHENTICATION_SECRET}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
    networks:
      - client

  registration:
    build: 
      context: services/registration/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.registration:latest
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
      - PASSWORD_PEPPER=${PASSWORD_PEPPER}
    networks:
      - client
      - private
    
  password-auth:
    build: 
      context: services/password-auth/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.password-auth:latest
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
      - TWO_FA_SECRET=${TWO_FA_SECRET}
      - AUTH_2FA_SECRET=${AUTH_2FA_SECRET}
      - PASSWORD_PEPPER=${PASSWORD_PEPPER}
    networks:
      - client
      - private
  
  fortytwo-auth:
    build: 
      context: services/fortytwo-auth/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.fortytwo-auth:latest
    environment:
      - AUTHENTICATION_SECRET=${AUTHENTICATION_SECRET}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
      - AUTH_2FA_SECRET=${AUTH_2FA_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - PASSWORD_PEPPER=${PASSWORD_PEPPER}
      - API42_CLIENT_ID=${API42_CLIENT_ID}
      - API42_SECRET=${API42_SECRET}
      - API42_REDIRECT_URI=${API42_REDIRECT_URI}
    networks:
      - client
      - private

  google-auth:
    build: 
      context: services/google-auth/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.google-auth:latest
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
      - AUTH_2FA_SECRET=${AUTH_2FA_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    networks:
      - client
      - private

  2fa:
    build:
      context: services/2fa/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.2fa:latest
    volumes:
      - sqlite:/database
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - AUTHENTICATION_SECRET=${AUTHENTICATION_SECRET}
      - TWO_FA_SECRET=${TWO_FA_SECRET}
    networks:
      - client
      - private

  lobbies:
    build: 
      context: services/lobbies/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.lobbies:latest
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - AUTHENTICATION_SECRET=${AUTHENTICATION_SECRET}
      - MATCHMAKING_SECRET=${MATCHMAKING_SECRET}
      - ACTIVITY_SSE_SECRET=${ACTIVITY_SSE_SECRET}
    networks:
      - client
      - private
    depends_on:
      matchmaking:
        condition: service_healthy

  matchmaking:
    build: 
      context: services/matchmaking/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.matchmaking:latest
    volumes:
      - sqlite:/database
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - AUTHENTICATION_SECRET=${AUTHENTICATION_SECRET}
      - MATCHMAKING_SECRET=${MATCHMAKING_SECRET}
      - MATCH_MANAGEMENT_SECRET=${MATCH_MANAGEMENT_SECRET}
      - PONG_SECRET=${PONG_SECRET}
      - MATCHMAKING_SCHEDULER_DELAY=${MATCHMAKING_SCHEDULER_DELAY}
    networks:
      - client
      - private

  profiles:
    build: 
      context: services/profiles/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.profiles:latest
    volumes:
      - sqlite:/database
    environment:
      - CDN_SECRET=${CDN_SECRET}
      - CDN_URL=${CDN_URL}
    networks:
      - private

  users:
    build: 
      context: services/users/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.users:latest
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - AUTHENTICATION_SECRET=${AUTHENTICATION_SECRET}
    networks:
     - client
     - private

  settings:
    build: 
      context: services/settings/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.settings:latest
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - AUTHENTICATION_SECRET=${AUTHENTICATION_SECRET}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
      - TWO_FA_SECRET=${TWO_FA_SECRET}
      - PASSWORD_PEPPER=${PASSWORD_PEPPER}
    networks:
      - client
      - private

  avatars:
    build: 
      context: services/avatars/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.avatars:latest
    volumes:
      - sqlite:/database
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - AUTHENTICATION_SECRET=${AUTHENTICATION_SECRET}
      - CDN_SECRET=${CDN_SECRET}
      - CDN_URL=${CDN_URL}
    networks:
      - client
    depends_on:
      cdn-nginx:
        condition: service_healthy

  social:
    build: 
      context: services/social/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.social:latest
    volumes:
      - sqlite:/database
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - AUTHENTICATION_SECRET=${AUTHENTICATION_SECRET}
      - ACTIVITY_SSE_SECRET=${ACTIVITY_SSE_SECRET}
      - SOCIAL_OFFLINE_DELAY=${SOCIAL_OFFLINE_DELAY}
      - SOCIAL_INACTIVITY_DELAY=${SOCIAL_INACTIVITY_DELAY}
    networks:
      - client
      - private
    depends_on:
      lobbies:
        condition: service_healthy

  cdn-nginx:
    build:
      context: services/CDN/nginx/
      args:
        - CONF_FILE=${NGINX_CONF_FILE}
    image: ${IMAGE_PREFIX}/transcendence.cdn-nginx:latest
    ports:
      - "127.0.0.1:8181:8181"
    volumes:
      - avatars:/app/avatars/users/:ro
      - ./services/CDN/.avatars:/app/avatars/default/:ro
    networks:
      - cdn
    depends_on:
      cdn-api:
        condition: service_healthy

  cdn-api:
    build: 
      context: services/CDN/api
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.cdn-api:latest
    volumes:
      - avatars:/app/avatars/users/
      - ./services/CDN/.avatars:/app/avatars/default/:ro
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - CDN_SECRET=${CDN_SECRET}
    networks:
     - cdn

    
  pong:
    build:
      context: services/pong/
      args:
        - BASE_IMAGE=${BASE_IMAGE}
    image: ${IMAGE_PREFIX}/transcendence.pong:latest
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - AUTHENTICATION_SECRET=${AUTHENTICATION_SECRET}
      - MATCH_MANAGEMENT_SECRET=${MATCH_MANAGEMENT_SECRET}
      - PONG_SECRET=${PONG_SECRET}
    networks:
      - client

networks:
  client:
    driver: bridge
  private:
    driver: bridge
  cdn:
    driver: bridge
    
volumes:
  avatars:
  sqlite:
