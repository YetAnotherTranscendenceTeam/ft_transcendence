services:
  nginx:
    build: services/nginx/
    ports:
      - "8080:8080"
      - "7979:7979"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    networks:
      - frontend
      - avatars
      - settings
      - documentation
      - social
    secrets:
      - ssl-crt
      - ssl-key
    depends_on:
      - avatars

  frontend:
    build:
      context: services/frontend/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/frontend/src:/services/frontend/src
      - ./services/frontend/public:/services/frontend/public
      - ./modules/:/modules:ro
    environment:
      - BACKEND_URL=${BACKEND_URL}
      - WS_URL=${WS_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    ports:
      - "127.0.0.1:4242:8080"
    networks:
      - frontend

  credentials:
    build:
      context: services/credentials/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/credentials/srcs:/services/credentials/srcs
      - ./modules/:/modules:ro
      - sqlite:/database
    ports:
      - "127.0.0.1:7002:3000"
    networks:
      - credentials
      - db-profiles

  token-manager:
    build:
      context: services/token-manager/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/token-manager/srcs:/services/token-manager/srcs
      - ./modules/:/modules:ro
      - sqlite:/database
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - JWT_SECRET=${JWT_SECRET}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
    ports:
      - 127.0.0.1:4002:3000
    networks:
      - frontend
      - tokens

  registration:
    build:
      context: services/registration/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/registration/srcs:/services/registration/srcs
      - ./modules/:/modules:ro
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
      - PASSWORD_PEPPER=${PASSWORD_PEPPER}
    ports:
      - "127.0.0.1:4012:3000"
    networks:
      - credentials
      - frontend
    
  password-auth:
    build:
      context: services/password-auth/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/password-auth/srcs:/services/password-auth/srcs
      - ./modules/:/modules:ro
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
      - PASSWORD_PEPPER=${PASSWORD_PEPPER}
    ports:
      - "127.0.0.1:4022:3000"
    networks:
      - credentials
      - frontend
      - tokens
  
  fortytwo-auth:
    build:
      context: services/fortytwo-auth/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/fortytwo-auth/srcs:/services/fortytwo-auth/srcs
      - ./modules/:/modules:ro
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - PASSWORD_PEPPER=${PASSWORD_PEPPER}
      - API42_CLIENT_ID=${API42_CLIENT_ID}
      - API42_SECRET=${API42_SECRET}
      - API42_REDIRECT_URI=${API42_REDIRECT_URI}
    ports:
      - "127.0.0.1:4042:3000"
    networks:
      - credentials
      - frontend
      - tokens
      - db-profiles
      - avatars

  google-auth:
    build:
      context: services/google-auth/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/google-auth/srcs:/services/google-auth/srcs
      - ./modules/:/modules:ro
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    ports:
      - "127.0.0.1:4032:3000"
    networks:
      - credentials
      - frontend
      - tokens
      - db-profiles
      - avatars

  lobbies:
    build:
      context: services/lobbies/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/lobbies/srcs:/services/lobbies/srcs
      - ./modules/:/modules:ro
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - JWT_SECRET=${JWT_SECRET}
      - MATCHMAKING_JWT_SECRET=${MATCHMAKING_JWT_SECRET}
    ports:
      - "127.0.0.1:4043:3000"
    networks:
      - frontend
      - db-profiles
    depends_on:
      - matchmaking

  matchmaking:
    build:
      context: services/matchmaking/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/matchmaking/srcs:/services/matchmaking/srcs
      - ./modules/:/modules:ro
      - sqlite:/database
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - MATCHMAKING_JWT_SECRET=${MATCHMAKING_JWT_SECRET}
      - MATCHMAKING_SCHEDULER_DELAY=${MATCHMAKING_SCHEDULER_DELAY}
    ports:
      - "127.0.0.1:4044:3000"
    networks:
      - frontend

  db-profiles:
    build:
      context: services/db-profiles/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/db-profiles/srcs:/services/db-profiles/srcs
      - ./modules/:/modules:ro
      - sqlite:/database
    environment:
      - CDN_JWT_SECRET=${CDN_JWT_SECRET}
      - CDN_URL=${CDN_URL}
    ports:
      - 127.0.0.1:7001:3000
    networks:
      - db-profiles

  users:
    build:
      context: services/users/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/users/srcs:/services/users/srcs
      - ./modules/:/modules:ro
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - 127.0.0.1:4003:3000
    networks:
     - frontend
     - db-profiles

  settings:
    build:
      context: services/settings/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/settings/srcs:/services/settings/srcs
      - ./modules/:/modules:ro
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - JWT_SECRET=${JWT_SECRET}
      - TOKEN_MANAGER_SECRET=${TOKEN_MANAGER_SECRET}
    ports:
      - 127.0.0.1:4004:3000
    networks:
      - settings
      - avatars
      - db-profiles
      - credentials
      - tokens

  avatars:
    build:
      context: services/avatars/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/avatars/srcs:/services/avatars/srcs
      - ./modules/:/modules:ro
      - sqlite:/database
    environment:
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CORS_ORIGIN=${FRONTEND_URL}
      - JWT_SECRET=${JWT_SECRET}
      - CDN_JWT_SECRET=${CDN_JWT_SECRET}
      - CDN_URL=${CDN_URL}
    ports:
      - 127.0.0.1:4113:3000
    networks:
      - avatars
      - cdn-test
    depends_on:
      cdn-nginx:
        condition: service_healthy

  social:
    build:
      context: services/social/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/social/srcs:/services/social/srcs
      - ./modules/:/modules:ro
      - sqlite:/database
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - JWT_SECRET=${JWT_SECRET}
      - SOCIAL_OFFLINE_DELAY=${SOCIAL_OFFLINE_DELAY}
      - SOCIAL_INACTIVITY_DELAY=${SOCIAL_INACTIVITY_DELAY}
    ports:
      - 127.0.0.1:4123:3000
    networks:
      - social
      - db-profiles
      - settings


  documentation:
    build:
      context: services/documentation/
      dockerfile: Dockerfile.dev
    volumes:
      - ./documentation/:/documentation/:ro
      - ./services/documentation/srcs:/services/documentation/srcs
      - ./modules/:/modules:ro
    environment:
      - BACKEND_URL=${BACKEND_URL}
    ports:
      - 42000:3000
    networks:
      - documentation

  cdn-nginx:
    build: services/CDN/nginx/
    ports:
      - "8181:8181"
    volumes:
      - avatars:/app/avatars/users/:ro
      - ./services/CDN/.avatars:/app/avatars/default/:ro
    networks:
      - cdn-api
      - cdn-test
    secrets:
      - ssl-crt
      - ssl-key
    depends_on:
      cdn-api:
        condition: service_healthy

  cdn-api:
    build:
      context: services/CDN/api/
      dockerfile: Dockerfile.dev
    volumes:
      - avatars:/app/avatars/users/
      - ./services/CDN/.avatars:/app/avatars/default/:ro
      - ./services/CDN/api/srcs:/services/CDN/api/srcs
      - ./modules/:/modules:ro
    environment:
      - CORS_ORIGIN=${FRONTEND_URL}
      - CDN_JWT_SECRET=${CDN_JWT_SECRET}
    networks:
     - cdn-api

networks:
  frontend:
    driver: bridge
  credentials:
    driver: bridge
  db-profiles:
    driver: bridge
  tokens:
    driver: bridge
  settings:
    driver: bridge
  documentation:
    driver: bridge
  avatars:
    driver: bridge
  social:
    driver: bridge
  cdn-api:
    driver: bridge
  swagger:
    driver: bridge

  cdn-test:
    driver: bridge
    
volumes:
  avatars:
  sqlite:

secrets:
  ssl-crt: 
    file: ./secrets/localhost.crt
  ssl-key: 
    file: ./secrets/localhost.key
